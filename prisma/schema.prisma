generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  userName String   
  reviews  Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  professor Professor @relation(fields: [professorId], references: [id])
  professorId Int
  courseId  Int
  content   String
  rating    Int
  grade     String?  // Optional grade field (A, B, C, etc.)
  term      Term     @relation(fields: [termId], references: [id])
  termId    Int
  createdAt DateTime @default(now())
}

model Professor {
  id            Int      @id @default(autoincrement())
  professorName String   @unique
  courses       Course[]
  reviews       Review[]
}

model Course {
  id              Int                   @id @default(autoincrement())
  code            String                @unique
  courseName      String
  description     String
  distrib         String[]
  worldCulture    String[]
  professors      Professor[]
  terms           Term[]                @relation("CourseTerms") // Link to Term model
  reviews         Review[]
  prerequisites   CoursePrerequisite[]  @relation("PrerequisiteCourses")
  prerequisiteFor CoursePrerequisite[]  @relation("CoursePrerequisites")
  gradeStats      CourseGradeStat[]
}

model CoursePrerequisite {
  course           Course @relation("CoursePrerequisites", fields: [courseId], references: [id])
  courseId         Int
  prerequisite     Course @relation("PrerequisiteCourses", fields: [prerequisiteId], references: [id])
  prerequisiteId   Int

  @@id([courseId, prerequisiteId])
}

model Term {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  courses      Course[] @relation("CourseTerms") // Link to Course model
  reviews      Review[]
  gradeStats   CourseGradeStat[]
}

model CourseGradeStat {
  id          Int    @id @default(autoincrement())
  course      Course @relation(fields: [courseId], references: [id])
  courseId    Int
  term        Term   @relation(fields: [termId], references: [id])
  termId      Int
  medianGrade Float  // Store as a float for flexibility (e.g., 3.7 for A-)
  
  @@unique([courseId, termId])
}
